%% @author Igor compiler
%% @doc Compiler version: igorc 2.0.0
%% DO NOT EDIT THIS FILE - it is machine generated

-module(ecouch_cdb).

-include_lib("stdlib/include/assert.hrl").
-include("ecouch_cdb.hrl").

-export([
    cdb_database_info_to_json/1,
    cdb_database_info_from_json/1,
    cdb_change_leaf_to_json/1,
    cdb_change_leaf_from_json/1,
    cdb_change_to_json/1,
    cdb_change_from_json/1,
    cdb_changes_to_json/1,
    cdb_changes_from_json/1,
    cdb_doc_row_value_to_json/1,
    cdb_doc_row_value_from_json/1,
    cdb_doc_row_to_json/1,
    cdb_doc_row_from_json/1,
    cdb_all_docs_to_json/1,
    cdb_all_docs_from_json/1,
    cdb_document_operation_response_to_json/1,
    cdb_document_operation_response_from_json/1,
    cdb_attachment_to_json/1,
    cdb_attachment_from_json/1,
    cdb_document_revisions_to_json/1,
    cdb_document_revisions_from_json/1,
    cdb_revision_status_to_json/1,
    cdb_revision_status_from_json/1,
    cdb_revision_info_to_json/1,
    cdb_revision_info_from_json/1,
    cdb_document_info_to_json/1,
    cdb_document_info_from_json/1,
    cdb_view_spec_to_json/1,
    cdb_view_spec_from_json/1,
    cdb_view_result_row_to_json/1,
    cdb_view_result_row_from_json/1,
    cdb_view_result_to_json/1,
    cdb_view_result_from_json/1,
    cdb_replication_request_to_json/1,
    cdb_replication_request_from_json/1,
    cdb_replication_result_to_json/1,
    cdb_replication_result_from_json/1,
    cdb_replication_history_to_json/1,
    cdb_replication_history_from_json/1
]).

-export_type([
    json/0,
    cdb_database_info/0,
    cdb_change_leaf/0,
    cdb_change/0,
    cdb_changes/0,
    cdb_doc_row_value/0,
    cdb_doc_row/0,
    cdb_all_docs/0,
    cdb_document_operation_response/0,
    cdb_attachment/0,
    cdb_document_revisions/0,
    cdb_revision_status/0,
    cdb_revision_info/0,
    cdb_document_info/0,
    cdb_view_spec/0,
    cdb_view_result_row/0,
    cdb_view_result/0,
    cdb_replication_request/0,
    cdb_replication_result/0,
    cdb_replication_history/0
]).

-type json() :: #json{}.
-type cdb_database_info() :: #cdb_database_info{}.
-type cdb_change_leaf() :: #cdb_change_leaf{}.
-type cdb_change() :: #cdb_change{}.
-type cdb_changes() :: #cdb_changes{}.
-type cdb_doc_row_value() :: #cdb_doc_row_value{}.
-type cdb_doc_row() :: #cdb_doc_row{}.
-type cdb_all_docs() :: #cdb_all_docs{}.
-type cdb_document_operation_response() :: #cdb_document_operation_response{}.
-type cdb_attachment() :: #cdb_attachment{}.
-type cdb_document_revisions() :: #cdb_document_revisions{}.
-type cdb_revision_status() :: 'available' | 'missing' | 'deleted'.
-type cdb_revision_info() :: #cdb_revision_info{}.
-type cdb_document_info() :: #cdb_document_info{}.
-type cdb_view_spec() :: #cdb_view_spec{}.
-type cdb_view_result_row() :: #cdb_view_result_row{}.
-type cdb_view_result() :: #cdb_view_result{}.
-type cdb_replication_request() :: #cdb_replication_request{}.
-type cdb_replication_result() :: #cdb_replication_result{}.
-type cdb_replication_history() :: #cdb_replication_history{}.

-spec cdb_database_info_to_json(cdb_database_info()) -> igor_json:json_object().

cdb_database_info_to_json(Record) ->
    #cdb_database_info{
        db_name = DbName,
        doc_count = DocCount,
        doc_del_count = DocDelCount,
        update_seq = UpdateSeq,
        purge_seq = PurgeSeq,
        compact_running = CompactRunning,
        disk_size = DiskSize,
        data_size = DataSize,
        instance_start_time = InstanceStartTime,
        disk_format_version = DiskFormatVersion
    } = Record,
    ?assert(DbName =/= undefined),
    ?assert(DocCount =/= undefined),
    ?assert(DocDelCount =/= undefined),
    ?assert(UpdateSeq =/= undefined),
    ?assert(PurgeSeq =/= undefined),
    ?assert(CompactRunning =/= undefined),
    ?assert(DiskSize =/= undefined),
    ?assert(DataSize =/= undefined),
    ?assert(InstanceStartTime =/= undefined),
    ?assert(DiskFormatVersion =/= undefined),
    #{
        <<"db_name">> => igor_json:pack(DbName, string),
        <<"doc_count">> => igor_json:pack(DocCount, int),
        <<"doc_del_count">> => igor_json:pack(DocDelCount, int),
        <<"update_seq">> => igor_json:pack(UpdateSeq, json),
        <<"purge_seq">> => igor_json:pack(PurgeSeq, json),
        <<"compact_running">> => igor_json:pack(CompactRunning, boolean),
        <<"disk_size">> => igor_json:pack(DiskSize, int),
        <<"data_size">> => igor_json:pack(DataSize, int),
        <<"instance_start_time">> => igor_json:pack(InstanceStartTime, string),
        <<"disk_format_version">> => igor_json:pack(DiskFormatVersion, int)
    }.

-spec cdb_database_info_from_json(igor_json:json_object()) -> cdb_database_info().

cdb_database_info_from_json(Json) ->
    #cdb_database_info{
        db_name = igor_json:parse(Json, <<"db_name">>, string),
        doc_count = igor_json:parse(Json, <<"doc_count">>, int),
        doc_del_count = igor_json:parse(Json, <<"doc_del_count">>, int),
        update_seq = igor_json:parse(Json, <<"update_seq">>, json),
        purge_seq = igor_json:parse(Json, <<"purge_seq">>, json),
        compact_running = igor_json:parse(Json, <<"compact_running">>, boolean),
        disk_size = igor_json:parse(Json, <<"disk_size">>, int),
        data_size = igor_json:parse(Json, <<"data_size">>, int),
        instance_start_time = igor_json:parse(Json, <<"instance_start_time">>, string),
        disk_format_version = igor_json:parse(Json, <<"disk_format_version">>, int)
    }.

-spec cdb_change_leaf_to_json(cdb_change_leaf()) -> igor_json:json_object().

cdb_change_leaf_to_json(Record) ->
    #cdb_change_leaf{rev = Rev} = Record,
    ?assert(Rev =/= undefined),
    #{
        <<"rev">> => igor_json:pack(Rev, string)
    }.

-spec cdb_change_leaf_from_json(igor_json:json_object()) -> cdb_change_leaf().

cdb_change_leaf_from_json(Json) ->
    #cdb_change_leaf{
        rev = igor_json:parse(Json, <<"rev">>, string)
    }.

-spec cdb_change_to_json(cdb_change()) -> igor_json:json_object().

cdb_change_to_json(Record) ->
    #cdb_change{
        id = Id,
        seq = Seq,
        changes = Changes,
        deleted = Deleted,
        doc = Doc
    } = Record,
    ?assert(Id =/= undefined),
    ?assert(Seq =/= undefined),
    ?assert(Changes =/= undefined),
    ?assert(Deleted =/= undefined),
    #{
        <<"id">> => igor_json:pack(Id, string),
        <<"seq">> => igor_json:pack(Seq, json),
        <<"changes">> => igor_json:pack(Changes, {list, {custom, fun ecouch_cdb:cdb_change_leaf_to_json/1}}),
        <<"deleted">> => igor_json:pack(Deleted, boolean),
        <<"doc">> => igor_json:pack(Doc, json)
    }.

-spec cdb_change_from_json(igor_json:json_object()) -> cdb_change().

cdb_change_from_json(Json) ->
    #cdb_change{
        id = igor_json:parse(Json, <<"id">>, string),
        seq = igor_json:parse(Json, <<"seq">>, json),
        changes = igor_json:parse(Json, <<"changes">>, {list, {custom, fun ecouch_cdb:cdb_change_leaf_from_json/1}}),
        deleted = igor_json:parse(Json, <<"deleted">>, boolean, false),
        doc = igor_json:parse(Json, <<"doc">>, json, undefined)
    }.

-spec cdb_changes_to_json(cdb_changes()) -> igor_json:json_object().

cdb_changes_to_json(Record) ->
    #cdb_changes{last_seq = LastSeq, results = Results} = Record,
    ?assert(LastSeq =/= undefined),
    ?assert(Results =/= undefined),
    #{
        <<"last_seq">> => igor_json:pack(LastSeq, json),
        <<"results">> => igor_json:pack(Results, {list, {custom, fun ecouch_cdb:cdb_change_to_json/1}})
    }.

-spec cdb_changes_from_json(igor_json:json_object()) -> cdb_changes().

cdb_changes_from_json(Json) ->
    #cdb_changes{
        last_seq = igor_json:parse(Json, <<"last_seq">>, json),
        results = igor_json:parse(Json, <<"results">>, {list, {custom, fun ecouch_cdb:cdb_change_from_json/1}})
    }.

-spec cdb_doc_row_value_to_json(cdb_doc_row_value()) -> igor_json:json_object().

cdb_doc_row_value_to_json(Record) ->
    #cdb_doc_row_value{rev = Rev} = Record,
    ?assert(Rev =/= undefined),
    #{
        <<"rev">> => igor_json:pack(Rev, string)
    }.

-spec cdb_doc_row_value_from_json(igor_json:json_object()) -> cdb_doc_row_value().

cdb_doc_row_value_from_json(Json) ->
    #cdb_doc_row_value{
        rev = igor_json:parse(Json, <<"rev">>, string)
    }.

-spec cdb_doc_row_to_json(cdb_doc_row()) -> igor_json:json_object().

cdb_doc_row_to_json(Record) ->
    #cdb_doc_row{
        id = Id,
        key = VarKey,
        value = VarValue,
        doc = Doc
    } = Record,
    ?assert(Id =/= undefined),
    ?assert(VarKey =/= undefined),
    ?assert(VarValue =/= undefined),
    #{
        <<"id">> => igor_json:pack(Id, string),
        <<"key">> => igor_json:pack(VarKey, string),
        <<"value">> => igor_json:pack(VarValue, {custom, fun ecouch_cdb:cdb_doc_row_value_to_json/1}),
        <<"doc">> => igor_json:pack(Doc, json)
    }.

-spec cdb_doc_row_from_json(igor_json:json_object()) -> cdb_doc_row().

cdb_doc_row_from_json(Json) ->
    #cdb_doc_row{
        id = igor_json:parse(Json, <<"id">>, string),
        key = igor_json:parse(Json, <<"key">>, string),
        value = igor_json:parse(Json, <<"value">>, {custom, fun ecouch_cdb:cdb_doc_row_value_from_json/1}),
        doc = igor_json:parse(Json, <<"doc">>, json, undefined)
    }.

-spec cdb_all_docs_to_json(cdb_all_docs()) -> igor_json:json_object().

cdb_all_docs_to_json(Record) ->
    #cdb_all_docs{total_rows = TotalRows, offset = Offset, rows = Rows} = Record,
    ?assert(TotalRows =/= undefined),
    ?assert(Offset =/= undefined),
    ?assert(Rows =/= undefined),
    #{
        <<"total_rows">> => igor_json:pack(TotalRows, int),
        <<"offset">> => igor_json:pack(Offset, int),
        <<"rows">> => igor_json:pack(Rows, {list, {custom, fun ecouch_cdb:cdb_doc_row_to_json/1}})
    }.

-spec cdb_all_docs_from_json(igor_json:json_object()) -> cdb_all_docs().

cdb_all_docs_from_json(Json) ->
    #cdb_all_docs{
        total_rows = igor_json:parse(Json, <<"total_rows">>, int),
        offset = igor_json:parse(Json, <<"offset">>, int),
        rows = igor_json:parse(Json, <<"rows">>, {list, {custom, fun ecouch_cdb:cdb_doc_row_from_json/1}})
    }.

-spec cdb_document_operation_response_to_json(cdb_document_operation_response()) -> igor_json:json_object().

cdb_document_operation_response_to_json(Record) ->
    #cdb_document_operation_response{id = Id, ok = Ok, rev = Rev} = Record,
    ?assert(Id =/= undefined),
    ?assert(Ok =/= undefined),
    ?assert(Rev =/= undefined),
    #{
        <<"id">> => igor_json:pack(Id, string),
        <<"ok">> => igor_json:pack(Ok, boolean),
        <<"rev">> => igor_json:pack(Rev, string)
    }.

-spec cdb_document_operation_response_from_json(igor_json:json_object()) -> cdb_document_operation_response().

cdb_document_operation_response_from_json(Json) ->
    #cdb_document_operation_response{
        id = igor_json:parse(Json, <<"id">>, string),
        ok = igor_json:parse(Json, <<"ok">>, boolean),
        rev = igor_json:parse(Json, <<"rev">>, string)
    }.

-spec cdb_attachment_to_json(cdb_attachment()) -> igor_json:json_object().

cdb_attachment_to_json(Record) ->
    #cdb_attachment{
        content_type = ContentType,
        data = Data,
        digest = Digest,
        encoded_length = EncodedLength,
        encoding = Encoding,
        length = Length,
        revpos = Revpos,
        stub = Stub,
        follows = Follows
    } = Record,
    #{
        <<"content_type">> => igor_json:pack(ContentType, string),
        <<"data">> => igor_json:pack(Data, binary),
        <<"digest">> => igor_json:pack(Digest, string),
        <<"encoded_length">> => igor_json:pack(EncodedLength, int),
        <<"encoding">> => igor_json:pack(Encoding, string),
        <<"length">> => igor_json:pack(Length, int),
        <<"revpos">> => igor_json:pack(Revpos, int),
        <<"stub">> => igor_json:pack(Stub, boolean),
        <<"follows">> => igor_json:pack(Follows, boolean)
    }.

-spec cdb_attachment_from_json(igor_json:json_object()) -> cdb_attachment().

cdb_attachment_from_json(Json) ->
    #cdb_attachment{
        content_type = igor_json:parse(Json, <<"content_type">>, string, undefined),
        data = igor_json:parse(Json, <<"data">>, binary, undefined),
        digest = igor_json:parse(Json, <<"digest">>, string, undefined),
        encoded_length = igor_json:parse(Json, <<"encoded_length">>, int, undefined),
        encoding = igor_json:parse(Json, <<"encoding">>, string, undefined),
        length = igor_json:parse(Json, <<"length">>, int, undefined),
        revpos = igor_json:parse(Json, <<"revpos">>, int, undefined),
        stub = igor_json:parse(Json, <<"stub">>, boolean, undefined),
        follows = igor_json:parse(Json, <<"follows">>, boolean, undefined)
    }.

-spec cdb_document_revisions_to_json(cdb_document_revisions()) -> igor_json:json_object().

cdb_document_revisions_to_json(Record) ->
    #cdb_document_revisions{ids = Ids, start = Start} = Record,
    ?assert(Ids =/= undefined),
    ?assert(Start =/= undefined),
    #{
        <<"ids">> => igor_json:pack(Ids, {list, string}),
        <<"start">> => igor_json:pack(Start, int)
    }.

-spec cdb_document_revisions_from_json(igor_json:json_object()) -> cdb_document_revisions().

cdb_document_revisions_from_json(Json) ->
    #cdb_document_revisions{
        ids = igor_json:parse(Json, <<"ids">>, {list, string}),
        start = igor_json:parse(Json, <<"start">>, int)
    }.

-spec cdb_revision_status_to_json(cdb_revision_status()) -> igor_json:json_string().

cdb_revision_status_to_json(available) -> <<"available">>;
cdb_revision_status_to_json(missing) -> <<"missing">>;
cdb_revision_status_to_json(deleted) -> <<"deleted">>.

-spec cdb_revision_status_from_json(igor_json:json()) -> cdb_revision_status().

cdb_revision_status_from_json(<<"available">>) -> available;
cdb_revision_status_from_json(<<"missing">>) -> missing;
cdb_revision_status_from_json(<<"deleted">>) -> deleted.

-spec cdb_revision_info_to_json(cdb_revision_info()) -> igor_json:json_object().

cdb_revision_info_to_json(Record) ->
    #cdb_revision_info{rev = Rev, status = Status} = Record,
    ?assert(Rev =/= undefined),
    ?assert(Status =/= undefined),
    #{
        <<"rev">> => igor_json:pack(Rev, string),
        <<"status">> => igor_json:pack(Status, {custom, fun ecouch_cdb:cdb_revision_status_to_json/1})
    }.

-spec cdb_revision_info_from_json(igor_json:json_object()) -> cdb_revision_info().

cdb_revision_info_from_json(Json) ->
    #cdb_revision_info{
        rev = igor_json:parse(Json, <<"rev">>, string),
        status = igor_json:parse(Json, <<"status">>, {custom, fun ecouch_cdb:cdb_revision_status_from_json/1})
    }.

-spec cdb_document_info_to_json(cdb_document_info()) -> igor_json:json_object().

cdb_document_info_to_json(Record) ->
    #cdb_document_info{
        id = Id,
        rev = Rev,
        deleted = Deleted,
        attachments = Attachments,
        conflicts = Conflicts,
        deleted_conflicts = DeletedConflicts,
        local_seq = LocalSeq,
        revs_info = RevsInfo,
        revisions = Revisions
    } = Record,
    ?assert(Id =/= undefined),
    ?assert(Rev =/= undefined),
    #{
        <<"_id">> => igor_json:pack(Id, string),
        <<"_rev">> => igor_json:pack(Rev, string),
        <<"deleted">> => igor_json:pack(Deleted, boolean),
        <<"_attachments">> => igor_json:pack(Attachments, {dict, string, {custom, fun ecouch_cdb:cdb_attachment_to_json/1}}),
        <<"_conflicts">> => igor_json:pack(Conflicts, json),
        <<"_deleted_conflicts">> => igor_json:pack(DeletedConflicts, json),
        <<"_local_seq">> => igor_json:pack(LocalSeq, int),
        <<"_revs_info">> => igor_json:pack(RevsInfo, {list, {custom, fun ecouch_cdb:cdb_revision_info_to_json/1}}),
        <<"_revisions">> => igor_json:pack(Revisions, {custom, fun ecouch_cdb:cdb_document_revisions_to_json/1})
    }.

-spec cdb_document_info_from_json(igor_json:json_object()) -> cdb_document_info().

cdb_document_info_from_json(Json) ->
    #cdb_document_info{
        id = igor_json:parse(Json, <<"_id">>, string),
        rev = igor_json:parse(Json, <<"_rev">>, string),
        deleted = igor_json:parse(Json, <<"deleted">>, boolean, undefined),
        attachments = igor_json:parse(Json, <<"_attachments">>, {dict, string, {custom, fun ecouch_cdb:cdb_attachment_from_json/1}}, undefined),
        conflicts = igor_json:parse(Json, <<"_conflicts">>, json, undefined),
        deleted_conflicts = igor_json:parse(Json, <<"_deleted_conflicts">>, json, undefined),
        local_seq = igor_json:parse(Json, <<"_local_seq">>, int, undefined),
        revs_info = igor_json:parse(Json, <<"_revs_info">>, {list, {custom, fun ecouch_cdb:cdb_revision_info_from_json/1}}, undefined),
        revisions = igor_json:parse(Json, <<"_revisions">>, {custom, fun ecouch_cdb:cdb_document_revisions_from_json/1}, undefined)
    }.

-spec cdb_view_spec_to_json(cdb_view_spec()) -> igor_json:json_object().

cdb_view_spec_to_json(Record) ->
    #cdb_view_spec{map = Map, reduce = Reduce} = Record,
    ?assert(Map =/= undefined),
    #{
        <<"map">> => igor_json:pack(Map, string),
        <<"reduce">> => igor_json:pack(Reduce, string)
    }.

-spec cdb_view_spec_from_json(igor_json:json_object()) -> cdb_view_spec().

cdb_view_spec_from_json(Json) ->
    #cdb_view_spec{
        map = igor_json:parse(Json, <<"map">>, string),
        reduce = igor_json:parse(Json, <<"reduce">>, string, undefined)
    }.

-spec cdb_view_result_row_to_json(cdb_view_result_row()) -> igor_json:json_object().

cdb_view_result_row_to_json(Record) ->
    #cdb_view_result_row{id = Id, key = VarKey, value = VarValue} = Record,
    ?assert(Id =/= undefined),
    ?assert(VarKey =/= undefined),
    ?assert(VarValue =/= undefined),
    #{
        <<"id">> => igor_json:pack(Id, string),
        <<"key">> => igor_json:pack(VarKey, json),
        <<"value">> => igor_json:pack(VarValue, json)
    }.

-spec cdb_view_result_row_from_json(igor_json:json_object()) -> cdb_view_result_row().

cdb_view_result_row_from_json(Json) ->
    #cdb_view_result_row{
        id = igor_json:parse(Json, <<"id">>, string),
        key = igor_json:parse(Json, <<"key">>, json),
        value = igor_json:parse(Json, <<"value">>, json)
    }.

-spec cdb_view_result_to_json(cdb_view_result()) -> igor_json:json_object().

cdb_view_result_to_json(Record) ->
    #cdb_view_result{
        offset = Offset,
        rows = Rows,
        total_rows = TotalRows,
        update_seq = UpdateSeq
    } = Record,
    ?assert(Offset =/= undefined),
    ?assert(Rows =/= undefined),
    ?assert(TotalRows =/= undefined),
    #{
        <<"offset">> => igor_json:pack(Offset, int),
        <<"rows">> => igor_json:pack(Rows, {list, {custom, fun ecouch_cdb:cdb_view_result_row_to_json/1}}),
        <<"total_rows">> => igor_json:pack(TotalRows, int),
        <<"update_seq">> => igor_json:pack(UpdateSeq, int)
    }.

-spec cdb_view_result_from_json(igor_json:json_object()) -> cdb_view_result().

cdb_view_result_from_json(Json) ->
    #cdb_view_result{
        offset = igor_json:parse(Json, <<"offset">>, int),
        rows = igor_json:parse(Json, <<"rows">>, {list, {custom, fun ecouch_cdb:cdb_view_result_row_from_json/1}}),
        total_rows = igor_json:parse(Json, <<"total_rows">>, int),
        update_seq = igor_json:parse(Json, <<"update_seq">>, int, undefined)
    }.

-spec cdb_replication_request_to_json(cdb_replication_request()) -> igor_json:json_object().

cdb_replication_request_to_json(Record) ->
    #cdb_replication_request{
        cancel = Cancel,
        continuous = Continuous,
        create_target = CreateTarget,
        doc_ids = DocIds,
        proxy = Proxy,
        source = Source,
        target = Target
    } = Record,
    ?assert(Source =/= undefined),
    ?assert(Target =/= undefined),
    #{
        <<"cancel">> => igor_json:pack(Cancel, boolean),
        <<"continuous">> => igor_json:pack(Continuous, boolean),
        <<"create_target">> => igor_json:pack(CreateTarget, boolean),
        <<"doc_ids">> => igor_json:pack(DocIds, {list, string}),
        <<"proxy">> => igor_json:pack(Proxy, string),
        <<"source">> => igor_json:pack(Source, string),
        <<"target">> => igor_json:pack(Target, string)
    }.

-spec cdb_replication_request_from_json(igor_json:json_object()) -> cdb_replication_request().

cdb_replication_request_from_json(Json) ->
    #cdb_replication_request{
        cancel = igor_json:parse(Json, <<"cancel">>, boolean, undefined),
        continuous = igor_json:parse(Json, <<"continuous">>, boolean, undefined),
        create_target = igor_json:parse(Json, <<"create_target">>, boolean, undefined),
        doc_ids = igor_json:parse(Json, <<"doc_ids">>, {list, string}, undefined),
        proxy = igor_json:parse(Json, <<"proxy">>, string, undefined),
        source = igor_json:parse(Json, <<"source">>, string),
        target = igor_json:parse(Json, <<"target">>, string)
    }.

-spec cdb_replication_result_to_json(cdb_replication_result()) -> igor_json:json_object().

cdb_replication_result_to_json(Record) ->
    #cdb_replication_result{
        history = History,
        ok = Ok,
        replication_id_version = ReplicationIdVersion,
        session_id = SessionId,
        source_last_seq = SourceLastSeq
    } = Record,
    ?assert(History =/= undefined),
    ?assert(Ok =/= undefined),
    ?assert(ReplicationIdVersion =/= undefined),
    ?assert(SessionId =/= undefined),
    ?assert(SourceLastSeq =/= undefined),
    #{
        <<"history">> => igor_json:pack(History, {list, {custom, fun ecouch_cdb:cdb_replication_history_to_json/1}}),
        <<"ok">> => igor_json:pack(Ok, boolean),
        <<"replication_id_version">> => igor_json:pack(ReplicationIdVersion, int),
        <<"session_id">> => igor_json:pack(SessionId, string),
        <<"source_last_seq">> => igor_json:pack(SourceLastSeq, int)
    }.

-spec cdb_replication_result_from_json(igor_json:json_object()) -> cdb_replication_result().

cdb_replication_result_from_json(Json) ->
    #cdb_replication_result{
        history = igor_json:parse(Json, <<"history">>, {list, {custom, fun ecouch_cdb:cdb_replication_history_from_json/1}}),
        ok = igor_json:parse(Json, <<"ok">>, boolean),
        replication_id_version = igor_json:parse(Json, <<"replication_id_version">>, int),
        session_id = igor_json:parse(Json, <<"session_id">>, string),
        source_last_seq = igor_json:parse(Json, <<"source_last_seq">>, int)
    }.

-spec cdb_replication_history_to_json(cdb_replication_history()) -> igor_json:json_object().

cdb_replication_history_to_json(Record) ->
    #cdb_replication_history{
        doc_write_failures = DocWriteFailures,
        docs_read = DocsRead,
        docs_written = DocsWritten,
        end_last_seq = EndLastSeq,
        end_time = EndTime,
        missing_checked = MissingChecked,
        missing_found = MissingFound,
        recorded_seq = RecordedSeq,
        session_id = SessionId,
        start_last_seq = StartLastSeq,
        start_time = StartTime
    } = Record,
    ?assert(DocWriteFailures =/= undefined),
    ?assert(DocsRead =/= undefined),
    ?assert(DocsWritten =/= undefined),
    ?assert(EndLastSeq =/= undefined),
    ?assert(EndTime =/= undefined),
    ?assert(MissingChecked =/= undefined),
    ?assert(MissingFound =/= undefined),
    ?assert(RecordedSeq =/= undefined),
    ?assert(SessionId =/= undefined),
    ?assert(StartLastSeq =/= undefined),
    ?assert(StartTime =/= undefined),
    #{
        <<"doc_write_failures">> => igor_json:pack(DocWriteFailures, int),
        <<"docs_read">> => igor_json:pack(DocsRead, int),
        <<"docs_written">> => igor_json:pack(DocsWritten, int),
        <<"end_last_seq">> => igor_json:pack(EndLastSeq, int),
        <<"end_time">> => igor_json:pack(EndTime, string),
        <<"missing_checked">> => igor_json:pack(MissingChecked, int),
        <<"missing_found">> => igor_json:pack(MissingFound, int),
        <<"recorded_seq">> => igor_json:pack(RecordedSeq, int),
        <<"session_id">> => igor_json:pack(SessionId, string),
        <<"start_last_seq">> => igor_json:pack(StartLastSeq, int),
        <<"start_time">> => igor_json:pack(StartTime, string)
    }.

-spec cdb_replication_history_from_json(igor_json:json_object()) -> cdb_replication_history().

cdb_replication_history_from_json(Json) ->
    #cdb_replication_history{
        doc_write_failures = igor_json:parse(Json, <<"doc_write_failures">>, int),
        docs_read = igor_json:parse(Json, <<"docs_read">>, int),
        docs_written = igor_json:parse(Json, <<"docs_written">>, int),
        end_last_seq = igor_json:parse(Json, <<"end_last_seq">>, int),
        end_time = igor_json:parse(Json, <<"end_time">>, string),
        missing_checked = igor_json:parse(Json, <<"missing_checked">>, int),
        missing_found = igor_json:parse(Json, <<"missing_found">>, int),
        recorded_seq = igor_json:parse(Json, <<"recorded_seq">>, int),
        session_id = igor_json:parse(Json, <<"session_id">>, string),
        start_last_seq = igor_json:parse(Json, <<"start_last_seq">>, int),
        start_time = igor_json:parse(Json, <<"start_time">>, string)
    }.

