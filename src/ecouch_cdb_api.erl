%% @author Igor compiler
%% @doc Compiler version: igorc 2.0.0
%% DO NOT EDIT THIS FILE - it is machine generated

-module(ecouch_cdb_api).

-include("ecouch.hrl").

-export([
    get_database_info/2,
    save_document/4,
    changes/4,
    stream_changes/5
]).

get_database_info(Server, Db) ->
    Url = io_lib:format("~s/~s", [Server#server.base_url, Db]),
    Request = {Url, Server#server.headers},
    case httpc:request(get, Request, [], [{body_format, binary}]) of
        {ok, {{_HttpVersion, StatusCode, _ReasonPhrase}, _Headers, Body}} when StatusCode < 300 ->
            ecouch_cdb:cdb_database_info_from_json(jsx:decode(Body, [return_maps]));
        {ok, {{_HttpVersion, StatusCode, _ReasonPhrase}, _Headers, Body}} ->
            error({http_error, StatusCode, Body});
        {error, Reason} ->
            error(Reason)
    end.

save_document(Server, Doc, Db, DocId) ->
    Url = io_lib:format("~s/~s/~s", [Server#server.base_url, Db, DocId]),
    Request = {Url, Server#server.headers, "application/json", jsx:encode(Doc)},
    case httpc:request(put, Request, [], [{body_format, binary}]) of
        {ok, {{_HttpVersion, StatusCode, _ReasonPhrase}, _Headers, Body}} when StatusCode < 300 ->
            ecouch_cdb:cdb_document_operation_response_from_json(jsx:decode(Body, [return_maps]));
        {ok, {{_HttpVersion, StatusCode, _ReasonPhrase}, _Headers, Body}} ->
            error({http_error, StatusCode, Body});
        {error, Reason} ->
            error(Reason)
    end.

changes(Server, Db, IncludeDocs, Since) ->
    Query = igor_http:compose_query([{"include_docs", IncludeDocs, {option, boolean}}, {"since", Since, {option, string}}]),
    Url = io_lib:format("~s/~s/_changes?~s", [Server#server.base_url, Db, Query]),
    Request = {Url, Server#server.headers},
    case httpc:request(get, Request, [], [{body_format, binary}]) of
        {ok, {{_HttpVersion, StatusCode, _ReasonPhrase}, _Headers, Body}} when StatusCode < 300 ->
            ecouch_cdb:cdb_changes_from_json(jsx:decode(Body, [return_maps]));
        {ok, {{_HttpVersion, StatusCode, _ReasonPhrase}, _Headers, Body}} ->
            error({http_error, StatusCode, Body});
        {error, Reason} ->
            error(Reason)
    end.

stream_changes(Server, Db, IncludeDocs, Since, Heartbeat) ->
    Query = igor_http:compose_query([{"include_docs", IncludeDocs, {option, boolean}}, {"since", Since, {option, string}}, {"feed", "continuous"}, {"heartbeat", Heartbeat, {option, int}}]),
    Url = io_lib:format("~s/~s/_changes?~s", [Server#server.base_url, Db, Query]),
    Request = {Url, Server#server.headers},
    case httpc:request(get, Request, [{timeout, infinity}], [{body_format, binary}, {stream, {self, once}}, {sync, false}]) of
        {ok, {{_HttpVersion, StatusCode, _ReasonPhrase}, _Headers, Body}} when StatusCode < 300 ->
            ecouch_cdb:cdb_changes_from_json(jsx:decode(Body, [return_maps]));
        {ok, RequestId} ->
            RequestId;
        {error, Reason} ->
            error(Reason)
    end.

